"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[616],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return k}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(t),k=r,m=d["".concat(s,".").concat(k)]||d[k]||c[k]||i;return t?a.createElement(m,o(o({ref:n},u),{},{components:t})):a.createElement(m,o({ref:n},u))}));function k(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7513:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return s},default:function(){return k},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return c}});var a=t(7462),r=t(3366),i=(t(7294),t(3905)),o=["components"],l={id:"task-pipeline-configuration",title:"Task Pipeline Configuration",type:"explainer"},s="Task Pipeline Configuration",p={unversionedId:"concepts/task-pipeline-configuration",id:"concepts/task-pipeline-configuration",title:"Task Pipeline Configuration",description:"Lerna delegates the running of npm scripts (forking processes etc) to Nx. The nx.json file is the place where you can",source:"@site/docs/concepts/task-pipeline-configuration.md",sourceDirName:"concepts",slug:"/concepts/task-pipeline-configuration",permalink:"/docs/concepts/task-pipeline-configuration",draft:!1,editUrl:"https://github.com/lerna/lerna/tree/main/website/docs/concepts/task-pipeline-configuration.md",tags:[],version:"current",frontMatter:{id:"task-pipeline-configuration",title:"Task Pipeline Configuration",type:"explainer"},sidebar:"main",previous:{title:"Hoisting",permalink:"/docs/concepts/hoisting"},next:{title:"How Caching Works",permalink:"/docs/concepts/how-caching-works"}},u={},c=[{value:"Run Tasks in Parallel",id:"run-tasks-in-parallel",level:2},{value:"Allow Tasks to Run in Any Order",id:"allow-tasks-to-run-in-any-order",level:2},{value:"Define Task Dependencies (aka Task Pipelines)",id:"define-task-dependencies-aka-task-pipelines",level:2}],d={toc:c};function k(e){var n=e.components,l=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},d,l,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"task-pipeline-configuration"},"Task Pipeline Configuration"),(0,i.kt)("p",null,"Lerna delegates the running of npm scripts (forking processes etc) to Nx. The ",(0,i.kt)("inlineCode",{parentName:"p"},"nx.json")," file is the place where you can\nconfigure how Nx does it."),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"If you don't have ",(0,i.kt)("inlineCode",{parentName:"p"},"nx.json"),", run ",(0,i.kt)("inlineCode",{parentName:"p"},"npx nx init"),"."))),(0,i.kt)("h2",{id:"run-tasks-in-parallel"},"Run Tasks in Parallel"),(0,i.kt)("p",null,"If you want to increase the number of processes running the scripts to, say, 5 (by default, it is 3), pass the\nfollowing:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npx lerna run build --concurrency=5\n")),(0,i.kt)("p",null,"Note, you can also change the default in ",(0,i.kt)("inlineCode",{parentName:"p"},"nx.json"),", like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="nx.json"',title:'"nx.json"'},'{\n  "tasksRunnerOptions": {\n    "default": {\n      "runner": "nx/tasks-runners/default",\n      "options": {\n        "cacheableOperations": [],\n        "parallel": 5\n      }\n    }\n  }\n}\n')),(0,i.kt)("h2",{id:"allow-tasks-to-run-in-any-order"},"Allow Tasks to Run in Any Order"),(0,i.kt)("p",null,"To run the ",(0,i.kt)("inlineCode",{parentName:"p"},"test")," script for each of the projects, run the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npx lerna run test --no-sort\n")),(0,i.kt)("p",null,"You should see the following output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Terminal Output"',title:'"Terminal','Output"':!0},"    \u2714  footer:test (1s)\n    \u2714  header:test (1s)\n    \u2714  remixapp:test (236ms)\n\n \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\n >  Lerna (powered by Nx)   Successfully ran target test for 3 projects (1s)\n")),(0,i.kt)("p",null,"Note that we are passing ",(0,i.kt)("inlineCode",{parentName:"p"},"--no-sort")," to tell Lerna that tasks can run in any order."),(0,i.kt)("h2",{id:"define-task-dependencies-aka-task-pipelines"},"Define Task Dependencies (aka Task Pipelines)"),(0,i.kt)("p",null,"Without our help Lerna cannot know what targets (scripts) require order and which don't. That's why you can\npass ",(0,i.kt)("inlineCode",{parentName:"p"},"--sort")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"--no-sort"),", but this isn't the best way to go about it."),(0,i.kt)("p",null,"If builds have to run in the topological order, they ",(0,i.kt)("strong",{parentName:"p"},"always")," have to run in that order; otherwise things will be broken. On the other hand, if tests can run in any order, it never make sense to run them in topological order. That would only make them slower."),(0,i.kt)("p",null,"A better way to do it is to tell Lerna how targets relate. Add the following to ",(0,i.kt)("inlineCode",{parentName:"p"},"nx.json"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="nx.json"',title:'"nx.json"'},'{\n  ...\n  "targetDefaults": {\n    "build": {\n      "dependsOn": ["^build"]\n    }\n  }\n}\n')),(0,i.kt)("p",null,"With this, Lerna knows that before it can build a project, it needs to build all of its dependencies first. There are,\nhowever, no constraints on tests."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Once you define the ",(0,i.kt)("inlineCode",{parentName:"p"},"targetDefaults")," property the sort flag is ignored.")),(0,i.kt)("p",null,"This mechanism is very flexible. Let's look at this example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="nx.json"',title:'"nx.json"'},'{\n  ...\n  "targetDefaults": {\n    "build": {\n      "dependsOn": ["^build", "prebuild"]\n    },\n    "test": {\n      "dependsOn": ["build"]\n    }\n  }\n}\n')),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Note, older versions of Nx used targetDependencies instead of targetDefaults. Both still work, but targetDefaults is\nrecommended.")),(0,i.kt)("p",null,"When running ",(0,i.kt)("inlineCode",{parentName:"p"},"lerna run test --scope=myproj"),", the above configuration would tell Lerna to"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Run the ",(0,i.kt)("inlineCode",{parentName:"li"},"test")," command for ",(0,i.kt)("inlineCode",{parentName:"li"},"myproj")),(0,i.kt)("li",{parentName:"ol"},"But since there's a dependency defined from ",(0,i.kt)("inlineCode",{parentName:"li"},"test -> build")," (see ",(0,i.kt)("inlineCode",{parentName:"li"},'test:["build"]'),"), Lerna runs ",(0,i.kt)("inlineCode",{parentName:"li"},"build")," for ",(0,i.kt)("inlineCode",{parentName:"li"},"myproj"),"\nfirst."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"build")," itself defines a dependency on ",(0,i.kt)("inlineCode",{parentName:"li"},"prebuild")," (on the same project) as well as ",(0,i.kt)("inlineCode",{parentName:"li"},"build")," of all the dependencies.\nTherefore, it will run the ",(0,i.kt)("inlineCode",{parentName:"li"},"prebuild")," script and will run the ",(0,i.kt)("inlineCode",{parentName:"li"},"build")," script for all the dependencies.")),(0,i.kt)("p",null,"Note, Lerna doesn't have to run all builds before it starts running tests. The task orchestrator will run as many tasks\nin parallel as possible as long as the constraints are met."),(0,i.kt)("p",null,"Situations like this are pretty common:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Mixing Targets",src:t(835).Z,width:"475",height:"372"})),(0,i.kt)("p",null,"Because we described the rules in ",(0,i.kt)("inlineCode",{parentName:"p"},"nx.json"),", they will apply to all the projects in the repo. You can also define\nproject-specific rules by adding them the project's ",(0,i.kt)("inlineCode",{parentName:"p"},"package.json"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  ...\n  "nx": {\n    "targets": {\n      "test": {\n        "dependsOn": [\n          "build"\n        ]\n      }\n    }\n  }\n}\n')))}k.isMDXComponent=!0},835:function(e,n,t){n.Z=t.p+"assets/images/mixing-targets-3bab2c060242f73baa4eb94f32ccabbc.png"}}]);